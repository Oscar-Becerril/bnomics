type User
  @model(subscriptions: null)
  @auth(
    rules: [
      {
        allow: owner
        ownerField: "userId"
        operations: [create, update, delete]
      }
    ]
  ) {
  id: ID!
  userId: ID
  username: String!
  posts: [Post] @connection
  createdAt: String
  updatedAt: String
}

type Article
  @model
  @searchable
  @auth(rules: [{ allow: owner, operations: [create, update, delete] }]) {
  id: ID!
  owner: String
  postContent: String
  postImage: S3Object
  votes: Int
}

type Post
  @model
  @auth(rules: [{ allow: owner, operations: [create, update, delete] }]) {
  id: ID!
  owner: String
  postContent: String
  postImage: S3Object
  comments: [Comment] @connection
  votes: Int
}

type Comment
  @model
  @auth(rules: [{ allow: owner, operations: [create, update, delete] }]) {
  id: ID!
  text: String!
  author: String!
  votes: Int
  post: Post @connection
}

type Vote
  @model
  @key(
    name: "byUser"
    fields: ["createdBy", "createdAt"]
    queryField: "votesByUser"
  ) {
  id: ID!
  postId: ID!
  createdBy: ID!
  createdAt: String!
  vote: VoteType
}

type S3Object {
  bucket: String!
  region: String!
  key: String!
}

input VoteInput {
  type: VoteType!
  id: ID!
}

enum VoteType {
  up
  down
}
